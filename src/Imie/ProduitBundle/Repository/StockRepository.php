<?php

namespace Imie\ProduitBundle\Repository;

use Doctrine\ORM\EntityRepository;

//Avec le use qui va avec :	
use Doctrine\ORM\EntityManager;
use Imie\ProduitBundle\Entity\Produit;
use Imie\ProduitBundle\Entity\Stock;
use Imie\ProduitBundle\Entity\Image;
/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below. //
 */
class StockRepository extends EntityRepository
{
    // retourne la liste de produits en stocks
    // gére les parametres pour ramener les stocks d'une ou plusieurs categories, ou par taille(s) ou couleurs
    // ou regroupement par produit
    public function  getStocks(EntityManager $em, $parametres){  
        //$parametres de where
            //categories $wct
            $wct=' 1=1 ';
            if(isset($parametres['categories']) && is_array($parametres['categories'])){
                $wct='';
                $or=' ';
                foreach( $parametres['categories'] as $pcategorie ){
                    $wct .=$or.' c.id='.$pcategorie.' ';
                    $or=' OR ' ;
                }  
            }
            //echo "<br/>\$wct=".$wct."";
            //couleurs $wco
            $wco=' 1=1 ';
            if(isset($parametres['couleurs']) && is_array($parametres['couleurs'])){
                $wco='';
                $or=' ';
                foreach( $parametres['couleurs'] as $pcouleur ){
                    $wco .=$or.' s.idcouleur='.$pcouleur.' ';
                    $or=' OR ' ;
                }  
            }
            //echo "<br/>\$wco=".$wco."";
            //tailles $wt
            $wt=' 1=1 ';
            if(isset($parametres['tailles']) && is_array($parametres['tailles'])){
                $wt='';
                $or=' ';
                foreach( $parametres['tailles'] as $ptaille ){
                    $wt .=$or.' s.idtaille='.$ptaille.' ';
                    $or=' OR ' ;
                }  
            }
            //echo "<br/>\$wt=".$wt."";
            
        //paramètres de regroupement group By
        if(isset($parametres['regrouper']) && $parametres['regrouper']=="produit"){ 
           /* $q = $queryBuilder->select("'IDENTITY(s.id) AS id',  sum(s.qtestock) as qtestock, sum(s.qtedefectueux) as qtedefectueux, s.idproduit ")
            ->from("ImieProduitBundle:Stock", "s")
            ->leftJoin("s.idproduit", "p")
            ->leftJoin("p.idcategorie", "c")
            ->leftJoin("p.idimage", "i")  
            ;*/
            $query  = $em->createQuery("SELECT 
             count(s.id) as gammes, sum(s.qtestock) as qtestock, sum(s.qtedefectueux) as qtedefectueux,
             'IDENTITY(s.idproduit) AS idproduit' , p.id as idproduit, p.nom as nom, p.prix as prix, 
             'IDENTITY(p.idcategorie) AS idcategorie' ,  c.nom as categorie,   
             'IDENTITY(p.idimage) AS idimage' ,   i.nom as image
             FROM ImieProduitBundle:Stock s 
             LEFT JOIN ImieProduitBundle:produit p with s.idproduit = p.id 
             LEFT JOIN ImieProduitBundle:categorie c with p.idcategorie = c.id 
             LEFT JOIN ImieProduitBundle:image i with p.idimage = i.id 
             WHERE ( (".$wct.") AND (".$wco.")  AND (".$wt.") )
             GROUP BY s.idproduit ,  p.idcategorie, p.idimage, c.nom, i.nom
             ORDER BY p.idcategorie ASC, s.idproduit ASC
             ");          
        }elseif(isset($parametres['regrouper']) && $parametres['regrouper']=="categorie"){ 
            $query  = $em->createQuery("SELECT 
             count(s.id) as gammes, sum(s.qtestock) as qtestock, sum(s.qtedefectueux) as qtedefectueux,
             'IDENTITY(s.idproduit) AS idproduit' ,
             'IDENTITY(p.idcategorie) AS idcategorie' ,  c.nom as categorie  
             FROM ImieProduitBundle:Stock s 
             LEFT JOIN ImieProduitBundle:produit p with s.idproduit = p.id 
             LEFT JOIN ImieProduitBundle:categorie c with p.idcategorie = c.id 
             WHERE ( (".$wct.") AND (".$wco.")  AND (".$wt.") )
             GROUP BY  p.idcategorie, c.nom
             ORDER BY p.idcategorie ASC, s.idproduit ASC
             ");          
        }else{
            $queryBuilder = $em->createQueryBuilder();
            $q = $queryBuilder->select("s, c, p, i")
            ->from("ImieProduitBundle:Stock", "s")
            ->leftJoin("s.idproduit", "p")
            ->leftJoin("p.idcategorie", "c")
            ->leftJoin("p.idimage", "i")  
            ;
            $q->where(" 1 = 1 ")    
              ->andWhere($wct)
              ->andWhere($wco)
              ->andWhere($wt)
              ;
            $q->add('orderBy', 'p.idcategorie ASC, s.idproduit ASC,s.idtaille ASC ');
            $query = $q->getQuery();
        }
        $stocks = $query->getResult();
        return $stocks;
    }
    
    public function  getStockId(EntityManager $em, $id){  
        $queryBuilder = $em->createQueryBuilder();
        $q = $queryBuilder->select("s, c, p, i")
            ->from("ImieProduitBundle:Stock", "s")
            ->leftJoin("s.idproduit", "p")
            ->leftJoin("p.idcategorie", "c")
            ->leftJoin("p.idimage", "i")
            ->where('s.id = :id')
            ->setParameter('id', $id)   
        ;
        
        $query = $q->getQuery();
        $stock = $query->getResult();
        if(isset($stock[0]) && !empty($stock[0]) && is_object($stock[0])){
            return $stock[0];
        }else{
            return null;
        }
    }
    
     /**
     * //ramene tous les éléments de stock pour une categorie
     * @param int $idGenre Id du genre à rechercher
     * @return Iabsis\Bundle\VideothequeBundle\Entity\Film[] Liste des films du genre demandé
     */
    public function findByCategorie($idCategorie = 0)
    {
        /* Création de la requète avec le query builder */
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select("s,t, cl, c, p, i")
            ->from("ImieProduitBundle:Stock", "s")
                ->leftJoin("s.idtaille", "t")
                ->leftJoin("s.idcouleur", "cl")
            ->leftJoin("s.idproduit", "p")
            ->leftJoin("p.idcategorie", "c")
            ->leftJoin("p.idimage", "i")
           ;
       
        /* Si on reçoit un id de genre valide alors on recherche les Films de ce genre là uniquement */
        if ((int)$idGenre > 0) {
            $queryBuilder->where("c.id=:idCategorie")->setParameter("idCategorie", (int)$idCategorie);
        }
        /* Puis on retourne la liste des films du genre demandé */
        return $queryBuilder->getQuery()->getResult();
    }
    
         /**
     * //ramene tous les éléments de stock pour une categorie
     * @param int $idGenre Id du genre à rechercher
     * @return Iabsis\Bundle\VideothequeBundle\Entity\Film[] Liste des films du genre demandé
     */
    public function findByProduit($idProduit = 0)
    {
        /* Création de la requète avec le query builder */
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select("s,t, cl, c, p, i")
            ->from("ImieProduitBundle:Stock", "s")
                ->leftJoin("s.idtaille", "t")
                ->leftJoin("s.idcouleur", "cl")
            ->leftJoin("s.idproduit", "p")
            ->leftJoin("p.idcategorie", "c")
            ->leftJoin("p.idimage", "i")
           ;
        /* Si on reçoit un id valide alors on recherche ceux là uniquement */
        if ((int)$idProduit > 0) {
            $queryBuilder->where("s.idproduit=:idproduit")->setParameter("idproduit", (int)$idProduit);
        }
        /* Puis on retourne la liste des films du genre demandé */
        return $queryBuilder->getQuery()->getResult();
    }
    
    public function search($data, $page = 0, $max = NULL, $getResult = true) 
    { 
        $qb = $this->_em->createQueryBuilder(); 
        $query = isset($data['query']) && $data['query']?$data['query']:null; 

        $qb->select("s,  t, cl, c, p, i")
            ->from("ImieProduitBundle:Stock", "s")
                ->leftJoin("s.idtaille", "t")
                ->leftJoin("s.idcouleur", "cl")
            ->leftJoin("s.idproduit", "p")
            ->leftJoin("p.idcategorie", "c")
            ->leftJoin("p.idimage", "i")
        ;

        if ($query) { 
            $qb 
                ->andWhere('p.nom like :query') 
                ->setParameter('query', "%".$query."%") 
            ; 
        } 
 
        if ($max) { 
            $preparedQuery = $qb->getQuery() 
                ->setMaxResults($max) 
                ->setFirstResult($page * $max) 
            ; 
        } else { 
            $preparedQuery = $qb->getQuery(); 
        } 
 
        return $getResult?$preparedQuery->getResult():$preparedQuery; 
    } 

    public function  getNextStockId(EntityManager $em, $id){  
        $queryBuilder = $em->createQueryBuilder();
        $q = $queryBuilder->select("s, c, p, i")
            ->from("ImieProduitBundle:Stock", "s")
            ->leftJoin("s.idproduit", "p")
            ->leftJoin("p.idcategorie", "c")
            ->leftJoin("p.idimage", "i")
            ->where('s.id > :id')
            ->setParameter('id', $id)
            ->add('orderBy', 'p.idcategorie ASC, s.idproduit ASC,s.idtaille ASC, s.id ');
        ;
        
        $query = $q->getQuery();
        $stock = $query->getResult();
        return $stock[0];
    }
    
    public function  getPrevStockId(EntityManager $em, $id){  
        $queryBuilder = $em->createQueryBuilder();
        $q = $queryBuilder->select("s, c, p, i")
            ->from("ImieProduitBundle:Stock", "s")
            ->leftJoin("s.idproduit", "p")
            ->leftJoin("p.idcategorie", "c")
            ->leftJoin("p.idimage", "i")
            ->where('s.id < :id')
            ->setParameter('id', $id)
            ->add('orderBy', 'p.idcategorie ASC, s.idproduit ASC,s.idtaille ASC, s.id ');
        ;
        
        $query = $q->getQuery();
        $stock = $query->getResult();
        return $stock[0];
    }
}